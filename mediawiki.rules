##
# info
##
[info]
description = MediaWiki formatting rules for Nginx docs
author = Cliff Wells <cliff@nginx.com>
version = 1.0
license = BSD
extension = txt
directory = mediawiki


##
# text substitutions
##
[defines]
nestedlist = (lambda c, re=re, xpath=xpath: len (re.findall (r'/list(\[\d+\])?(/|$)', xpath)) * c)
cr = "\n"
para = "\n\n"
bold = "'''"
ital = "''"
list_bullet = "*"
br = "<br>"
codeblock = '\n<geshi lang="nginx">{0}</geshi>\n'
preblock = "<code>{0}</code>"
boldblock = "'''{0}'''"
italblock = "''{0}''"
collapsible = "wikitable mw-collapsible mw-collapsed"

##
# defaults
##
[defaults]
~ ^
    start:
        sanitize = True
        collapse = True
    end:
        sanitize = True
        collapse = True


##
# rules
##
[rules]

# discard everthing not under /module/section/directive
~ ^/module(?!/section(\[\d+\])?/directive)
    start:
        discard = True
    end:
        discard = True

~ /directive(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        _name = elem.get ('name')
        prefix = "== {0} ==\n".format (_name)
    end:
        sanitize = True
        collapse = True
        suffix = '</div>'
        newfile = True

~ /(syntax|context|default|appeared-in)(\[1\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        _prev = elem.getprevious ().tag if elem.getprevious () is not None else elem.getparent ().tag
        _starttable = '<table class="directive-ref-table">' if _prev == "directive" else ""
        _name = elem.xpath ('ancestor::directive')[0].get ('name') if elem.tag == 'syntax' else ''
        _tag = elem.tag.capitalize ().replace ('-', ' ')
        prefix = '{table}{cr}<tr><td>{bold}{tag}:{bold}</td>{cr}<td>{cr}{name}'.format (table=_starttable, tag=_tag, name=_name, cr=$cr, br=$br, bold=$bold)
    end:
        sanitize = True
        collapse = True
        strip = True
        _next = elem.getnext ().tag if elem.getnext() is not None else ""
        _endtable = '</table><div class=$collapsible>' if _next == "para" else ""
        suffix = "" if _next == elem.tag else "</td></tr>" + _endtable

~ /(syntax|context|default|appeared-in)(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        _name = elem.xpath ('ancestor::directive')[0].get ('name') if elem.tag == 'syntax' else ''
        prefix = '{br}{name}'.format (name=_name, cr=$cr, br=$br)
    end:
        sanitize = True
        collapse = True
        strip = True
        _next = elem.getnext ().tag if elem.getnext() is not None else ""
        _endtable = '</table><div class=$collapsible>' if _next == "para" else ""
        suffix = "" if _next == elem.tag else "</td></tr>" + _endtable

~ /(syntax|context|default|appeared-in)(\[\d+\])?/value(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        format = " ''{0}'' "
    end:
        sanitize = True
        collapse = True
        strip = True

~ /(syntax|context|default|appeared-in)(\[\d+\])?/literal(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        format = " <code>{0}</code> "
    end:
        sanitize = True
        collapse = True
        strip = True

~ /(tag-desc|listitem)(\[\d+\])?/example(\[\d+\])?$
    start:
        sanitize = True
        strip = True
        format = $codeblock
    end:
        sanitize = True
        collapse = True
        lstrip = True
        prefix = $nestedlist (':')

~ /example(\[\d+\])?$
    start:
        sanitize = True
        strip = True
        format = $codeblock
    end:
        sanitize = True
        collapse = True
        lstrip = True

~ /list(\[\d+\])?/tag-name(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        prefix = "{cr}{0}".format ($nestedlist (';'), cr=$cr)

~ /(?P<list>list)(\[\d+\])?/tag-desc(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        prefix = "{cr}{0}".format ($nestedlist (':'), cr=$cr)

~ /listitem(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        prefix = '{cr}{0}'.format ($nestedlist ('*'), cr=$cr)

~ /list(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        prefix = $cr
    end:
        sanitize = True
        collapse = True
        suffix = $cr

~ /note(\[\d+\])?$

~ /para(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        lstrip = True
        prefix = $para

~ /c-def(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        format = "``{0}``"

~ /c-func(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        format = "''{0}()''"

~ /link(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        _wikipage = ''.join ([p.capitalize () for p in filename.split ('_')[1:]])
        _id = "#{0}".format (elem.get ('id')) if elem.get ('id') else ""
        _text = "{0}" if elem.text else elem.get ('id')
        # _anchor = '<span id="{0}">{{0}}</span>'.format (_id)
        format = "[[{wikipage}{id}|{text}]]".format (id=_id, text=_text, wikipage=_wikipage)

~ /command(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        format = $preblock

~ /emphasis(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        format = $boldblock

~ /header(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        format = $preblock

~ /http-status(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        _code = elem.get ('code').strip ()
        _text = elem.get ('text').strip ()
        replace = "{0} ({1})".format (_code, _text)
        format = $preblock

~ /literal(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        format = $preblock
        prefix = " " if last_output.endswith ('|') else ""
    end:
        sanitize = True
        collapse = True
        suffix = " " if elem.tail and elem.tail.startswith ('|') else ""

~ /path(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        format = $preblock

~ /value(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        format = $italblock

~ /var(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        format = $preblock

~ /comment\(\)(\[\d+\])?$
    start:
        discard = True

# default processing on anything else
~ .*
    start:
        sanitize = True
        collapse = True
        debug = True
    end:
        sanitize = True
        collapse = True
        debug = True
