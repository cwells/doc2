##
# info
##
[info]
description = MediaWiki formatting rules for Nginx docs (directive block only)
author = Cliff Wells <cliff@nginx.com>
version = 1.0
license = BSD
extension = txt
directory = mediawiki


##
# text substitutions
##
[defines]
nestedlist = (lambda c, re=re, xpath=xpath: len (re.findall (r'/list(\[\d+\])?(/|$)', xpath)) * c)
cr = "\n"
para = "\n\n"
bold = "'''"
ital = "''"
list_bullet = "*"
br = "<br>"
codeblock = '\n<geshi lang="nginx">{0}</geshi>\n'
preblock = "<code>{0}</code>"
boldblock = "'''{0}'''"
italblock = "''{0}''"
collapsible = "wikitable mw-collapsible mw-collapsed"

##
# defaults
##
[defaults]
~ ^
    start:
        sanitize = True
        collapse = True
    end:
        sanitize = True
        collapse = True


##
# rules
##
[rules]

# discard everthing not under /module/section/directive
~ ^/module(?!/section(\[\d+\])?/directive)
    start:
        discard = True
    end:
        discard = True

~ /directive(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        prefix = '<table class="directive-ref-table">{cr}'.format (cr=$cr)
    end:
        sanitize = True
        collapse = True
        _directive = elem.get ('name')
        _ref = '[http://nginx.org/en/docs/http/{filename}.html#{directive} {directive}]'.format (filename=filename, directive=_directive)
        suffix = "{cr}<tr><td>'''Reference:'''</td><td>{ref}</td></tr></table>{cr}".format (ref=_ref, cr=$cr)
        newfile = True

#
# syntax
#
~ /syntax(\[1\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        _prev = elem.getprevious ().tag if elem.getprevious () is not None else elem.getparent ().tag
        _name = "'''{0}''' ".format (elem.xpath ('ancestor::directive')[0].get ('name'))
        _tag = elem.tag.capitalize ().replace ('-', ' ')
        prefix = "{cr}<tr><td class='drt-td1'>{bold}{tag}:{bold}</td>{cr}<td class='drt-td2'>{cr}{name}".format (tag=_tag, name=_name, cr=$cr, br=$br, bold=$bold)
    end:
        sanitize = True
        collapse = True
        strip = True
        _isblock = elem.get ('block') == 'yes'
        _block = [" ", ""][last_output [:-1] == " "] + "{ ... }" if _isblock else ""
        _next = elem.getnext ().tag if elem.getnext() is not None else ""
        suffix = _block if _next == elem.tag else "{0}</td></tr>".format (_block)

~ /syntax(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        _isblock = elem.get ('block') == 'yes'
        format = "{{ {0} }}" if _isblock else None
        _name = "'''{0}''' ".format (elem.xpath ('ancestor::directive')[0].get ('name'))
        prefix = "{br}{name}".format (name=_name, cr=$cr, br=$br)
    end:
        sanitize = True
        collapse = True
        strip = True
        _isblock = elem.get ('block') == 'yes'
        _block = [" ", ""][last_output [:-1] == " "] + "{ ... }" if _isblock else ""
        _next = elem.getnext ().tag if elem.getnext() is not None else ""
        suffix = _block if _next == elem.tag else "{0}</td></tr>".format (_block)


#
# context
#
~ /context(\[1\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        _prev = elem.getprevious ().tag if elem.getprevious () is not None else elem.getparent ().tag
        _tag = elem.tag.capitalize ().replace ('-', ' ')
        prefix = "{cr}<tr><td>{bold}{tag}:{bold}</td>{cr}<td>{cr}".format (tag=_tag, cr=$cr, br=$br, bold=$bold)
    end:
        sanitize = True
        collapse = True
        strip = True
        _next = elem.getnext ().tag if elem.getnext() is not None else ""
        suffix = "" if _next == elem.tag else "</td></tr>"

~ /context(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        prefix = $br
    end:
        sanitize = True
        collapse = True
        strip = True
        _next = elem.getnext ().tag if elem.getnext() is not None else ""
        suffix = "" if _next == elem.tag else "</td></tr>"

#
# default
#
~ /default(\[1\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        _isblock = elem.xpath ('ancestor::directive/syntax')[0].get ('block') == 'yes'
        _fmt = "{{ {0} }}" if _isblock and elem.text else "{0}"
        format = "''{0}''".format (_fmt) if elem.text else _fmt
        _prev = elem.getprevious ().tag if elem.getprevious () is not None else elem.getparent ().tag
        _tag = elem.tag.capitalize ().replace ('-', ' ')
        prefix = "{cr}<tr><td>{bold}{tag}:{bold}</td>{cr}<td>{cr}".format (tag=_tag, cr=$cr, br=$br, bold=$bold)
    end:
        sanitize = True
        collapse = True
        strip = True
        _next = elem.getnext ().tag if elem.getnext() is not None else ""
        suffix = "" if _next == elem.tag else "</td></tr>"

~ /default(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        _isblock = elem.xpath ('ancestor::directive/syntax')[0].get ('block') == 'yes'
        _fmt = "{{ {0} }}" if _isblock and elem.text else "{0}"
        format = "''{0}''".format (_fmt) if elem.text else _fmt
        prefix = "{br}".format (cr=$cr, br=$br)
    end:
        sanitize = True
        collapse = True
        strip = True
        _next = elem.getnext ().tag if elem.getnext() is not None else ""
        suffix = "" if _next == elem.tag else "</td></tr>"

#
# appeared-in
#
~ /appeared-in(\[1\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        _tag = elem.tag.capitalize ().replace ('-', ' ')
        prefix = "{cr}<tr><td>{bold}{tag}:{bold}</td>{cr}<td>{cr}".format (tag=_tag, cr=$cr, br=$br, bold=$bold)
    end:
        sanitize = True
        collapse = True
        strip = True
        _next = elem.getnext ().tag if elem.getnext() is not None else ""
        suffix = "" if _next == elem.tag else "</td></tr>"

~ /appeared-in(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        prefix = $br
    end:
        sanitize = True
        collapse = True
        strip = True
        _next = elem.getnext ().tag if elem.getnext() is not None else ""
        suffix = "" if _next == elem.tag else "</td></tr>"

#
# rest...
#
~ /(syntax|context|default|appeared-in)(\[\d+\])?/value(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        format = " ''{0}'' "
    end:
        sanitize = True
        collapse = True
        strip = True

~ /(syntax|context|default|appeared-in)(\[\d+\])?/literal(\[\d+\])?$
    start:
        sanitize = True
        collapse = True
        strip = True
        format = " <code>{0}</code> "
    end:
        sanitize = True
        collapse = True
        strip = True

# default processing on anything else
~ .*
    start:
        discard = True
    end:
        discard = True
