##
# info
##
[info]
description = MediaWiki formatting rules for Nginx docs
author = Cliff Wells <cliff@nginx.com>
version = 1.0
license = BSD
extension = txt
directory = mediawiki

##
# defaults
##
[defaults]
start = do.discard, do.sanitize, do.collapse, do.strip, do.replace, do.combine, do.format, do.prefix, do.indent
end = do.discard, do.sanitize, do.collapse, do.suffix, do.newfile
collapse = True
sanitize = True
debug = False


##
# text substitutions
##
[defines]
pad = (lambda s, c=' ': c * len (s))
nestedlist = (lambda c, re=re, xpath=xpath: len (re.findall (r'/list(\[\d+\])?(/|$)', xpath)) * c)
tabwidth = 4
cr = "\n"
para = "\n\n"

bold = "'''"
ital = "''"
list_bullet = "*"

codeblock = '\n\n<geshi lang="nginx">\n{0}\n</geshi>\n'
preblock = "<code>{0}</code>"
boldblock = "'''{0}'''"
italblock = "''{0}''"


##
# rules
##
[rules]

# discard everthing not under /module/section/directive
^/module(?!/section(\[\d+\])?/directive):
    debug = False
    discard = True

# and process everything else...

/directive(\[\d+\])?$:
    newfile = True
    name = elem.get ('name')
    prefix = "== {0} ==".format (name)

/context(\[1\])?$: 
    combine = "context"
    prefix = "{cr}{cr}Context: ".format (cr=$cr)
    format = $preblock

/context(\[\d+\]):
    discard = True

/default(\[\d+\])?$:
    prefix = "{cr}{cr}Default: ".format (cr=$cr)
    strip = True
    format = $preblock

/syntax(\[1\])?$:
    name = elem.xpath ('ancestor::directive')[0].get ('name')
    prefix = "{cr}{cr}Syntax: {bold}{0}{bold} ".format (name, cr=$cr, bold=$bold)
    strip = True

/syntax(\[\d+\])?$:
    name = elem.xpath ('ancestor::directive')[0].get ('name')
    prefix = "{cr}{0}{bold}{1}{bold} ".format ($pad ("Syntax: "), name, cr=$cr, bold=$bold)
    strip = True

/syntax(\[\d+\])?/value(\[\d+\])?$:
    format = $italblock

/syntax(\[\d+\])?/literal(\[\d+\])?$:
    format = $preblock
 
/example(\[\d+\])?$:
    format = $codeblock
    indent = $tabwidth
    collapse = False
    strip = True

/list(\[\d+\])?/tag-name(\[\d+\])?$:
    start = do.sanitize, do.collapse, do.prefix, do.indent
    end = do.sanitize, do.collapse
    prefix = "{cr}{0}".format ($nestedlist (';'), cr=$cr)
    indent = 4

/(?P<list>list)(\[\d+\])?/tag-desc(\[\d+\])?$:
    start = do.sanitize, do.collapse, do.prefix, do.indent
    end = do.sanitize, do.collapse
    prefix = "{cr}{0}".format ($nestedlist (':'), cr=$cr)
    indent = 8

/listitem(\[\d+\])?$:
    start = do.sanitize, do.collapse, do.prefix, do.indent
    end = do.sanitize, do.collapse
    prefix = '{cr}{0}'.format ($nestedlist ('*'), cr=$cr)
    indent = 4

/list(\[\d+\])?$:
    prefix = $cr
    suffix = $cr

/note(\[\d+\])?$:

/para(\[\d+\])?$:
    prefix = $para

/c-def(\[\d+\])?$:
    format = "``{0}``"

/c-func(\[\d+\])?$:
    format = "''{0}()''"

/link(\[\d+\])?$:
    format = "[{0}|{0}]"

/command(\[\d+\])?$:
    format = $preblock

/emphasis(\[\d+\])?$:
    format = $boldblock

/header(\[\d+\])?$:
    format = $preblock

/http-status(\[\d+\])?$:
    http_code = elem.get ('code').strip ()
    http_text = elem.get ('text').strip ()
    replace = "{0} ({1})".format (http_code, http_text)
    format = $preblock

/literal(\[\d+\])?$:
    format = $preblock

/path(\[\d+\])?$:
    format = $preblock

/value(\[\d+\])?$:
    format = $preblock

/var(\[\d+\])?$:
    format = $preblock

/appeared-in(\[\d+\])?$:
    prefix = "{cr}Compatiblity: ".format (cr=$cr)

/comment\(\)(\[\d+\])?$:
    discard = True

# default processing on anything else
.*:
    debug = True
